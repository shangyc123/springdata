Spring Data Solr 就是为了方便 solr 的开发研制的一个框架，其底层是对 SolrJ（官方 API	）的封装
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
part 1：配置solr主机端口

@Configuration
// 指定索引约束规则的实体类所在的包，支持存在多个约束实体类
@EnableSolrRepositories(basePackages = { "org.springframework.data.solr.showcase.product" }, multicoreSupport = true)
public class SearchContext {

	@Bean
	public SolrServer solrServer(@Value("${solr.host}") String solrHost) {
		return new HttpSolrServer(solrHost);
	}

}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
part 2: 描述约束规则的实体类

// 指明此实体类为描述约束规则的实体类，并指明核心名称
// @Id @Indexed 指明改属性是索引的id属性
// @Indexed(NAME_FIELD_NAME) 指明改属性是索引中的属性，并指明索引中的真实字段名称
@SolrDocument(solrCoreName = "collection1")
public class Product implements SearchableProductDefinition {

	private @Id @Indexed String id;

	private @Indexed(NAME_FIELD_NAME) String name;

	private @Indexed(AVAILABLE_FIELD_NAME) boolean available;

	private @Indexed List<String> features;

	private @Indexed(PRICE_FIELD_NAME) Float price;

	private @Indexed(CATEGORIES_FIELD_NAME) List<String> categories;

	private @Indexed Integer popularity;

	private @Indexed(LOCATION_FIELD_NAME) GeoLocation location;

	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public boolean isAvailable() {
		return available;
	}

	public void setAvailable(boolean available) {
		this.available = available;
	}

	public List<String> getFeatures() {
		return features;
	}

	public void setFeatures(List<String> features) {
		this.features = features;
	}

	public Float getPrice() {
		return price;
	}

	public void setPrice(Float price) {
		this.price = price;
	}

	public List<String> getCategories() {
		return categories;
	}

	public void setCategories(List<String> categories) {
		this.categories = categories;
	}

	public Integer getPopularity() {
		return popularity;
	}

	public void setPopularity(Integer popularity) {
		this.popularity = popularity;
	}

	public GeoLocation getLocation() {
		return location;
	}

	public void setLocation(GeoLocation location) {
		this.location = location;
	}

	@Override
	public String toString() {
		return "Product [id=" + id + ", name=" + name + "]";
	}

}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
MappingSolrConverter
MappingSolrConverter您可以注册自定义转换器为您SolrDocument和SolrInputDocument以及其他类型的嵌套bean内部。
该转换器与并非100％兼容DocumentObjectBinder，@Indexed必须添加该转换器，以免readonly=true将字段写入Solr。以下示例映射了文档中的许多字段：

public class Product {
  @Field
  private String simpleProperty;

  @Field("somePropertyName")
  private String namedPropery;

  @Field
  private List<String> listOfValues;

  @Indexed(readonly = true)
  @Field("property_*")
  private List<String> ignoredFromWriting;

  @Field("mappedField_*")
  private Map<String, List<String>> mappedFieldValues;

  @Dynamic
  @Field("dynamicMappedField_*")
  private Map<String, String> dynamicMappedFieldValues;

  @Field
  private GeoLocation location;

}

下表描述了可以映射的属性MappingSolrConverter：

属性	                                    写映射
simpleProperty                              <field name="simpleProperty">value</field>

namedPropery                                <field name="somePropertyName">value</field>

listOfValues								<field name="listOfValues">value 1</field> <field name="listOfValues">value 2</field> <field name="listOfValues">value 3</field>

ignoreFromWriting							//not written to document

appedFieldValues							<field name="mapentry[0].key">mapentry[0].value[0]</field> <field name="mapentry[0].key">mapentry[0].value[1]</field> <field name="mapentry[1].key">mapentry[1].value[0]</field>

dynamicMappedFieldValues					<field name="'dynamicMappedField_' + mapentry[0].key">mapentry[0].value[0]</field> <field name="'dynamicMappedField_' + mapentry[0].key">mapentry[0].value[1]</field> <field name="'dynamicMappedField_' + mapentry[1].key">mapentry[1].value[0]</field>

location									<field name="location">48.362893,14.534437</field>


您可以通过添加注册自定义转换器CustomConversions来SolrTemplate与自己的初始化它Converter的实现，如下例所示：

<bean id="solrConverter" class="org.springframework.data.solr.core.convert.MappingSolrConverter">
	<constructor-arg>
		<bean class="org.springframework.data.solr.core.mapping.SimpleSolrMappingContext" />
	</constructor-arg>
	<property name="customConversions" ref="customConversions" />
</bean>

<bean id="customConversions" class="org.springframework.data.solr.core.convert.SolrCustomConversions">
	<constructor-arg>
		<list>
			<bean class="com.acme.MyBeanToSolrInputDocumentConverter" />
		</list>
	</constructor-arg>
</bean>

<bean id="solrTemplate" class="org.springframework.data.solr.core.SolrTemplate">
	<constructor-arg ref="solrClient" />
	<property name="solrConverter" ref="solrConverter" />
</bean>
------------------------------------------------------------------------------------------------------------------------------------------------------------------------